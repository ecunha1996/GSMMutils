%initCobraToolbox(false);
%pre_model = readCbModel('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\models\model_dfba.xml');

%writeCbModel(pre_model, 'format', 'mat', 'fileName', 'C:\Users\Bisbii\PythonProjects\ExpGSMM\data\models\dsalina_dfba.mat');

matrix = readExpMatrix('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\experimental\Matriz- DCCR Dunaliella salina_dfba.xlsx');
z = 30;


INFO.ro1 = 104; %
INFO.ro0 = 0.000005; %0
INFO.wPmin = 0.12; %0.12;
INFO.wPopt = 0.17; %0.17;
INFO.a0 = 0.065; %
INFO.a1 = 1e-5; %;
INFO.a2 = 40; %50;
INFO.a3 = 50; %40;
INFO.l = 2; %2
INFO.smoothing_factor = 4;
INFO.vhpo4max = 0.001;
INFO.ExA = 420/1000*24;
INFO.vcarmax = 18 * 10^-3 * 24;
INFO.c0 = 1e-5;

%45.0000         0    0.1050    0.1700    0.0650    0.0000   40.0000   50.0000    2.0000    4.0000    0.0500   10.0800    0.4320

nmodel = 1; % Number of models
INFO.nmodel = nmodel;
% Load models. These should be .mat files generated by the COBRA toolbox. 
% When generating these files using the COBRA toolbox, a big number is used
% as infinity. This number should be fed to the DB vector (Default bound).

models = cell(nmodel);
DB = zeros(nmodel);
for i = 1:nmodel
    load C:\Users\Bisbii\PythonProjects\ExpGSMM\data\models\dsalina_dfba.mat
    models{i} = model;
    DB(i) = 10000;
end
INFO.DB = DB;
%models{1} = changeRxnBounds(models{1}, 'EX_C00205__dra', -10000, 'l');
%models{1} = changeRxnBounds(models{1}, 'EX_C00011__dra', -1000, 'l');

models{i}.lb(find(strcmp(models{1}.rxns, 'EX_C00205__dra'))) = -10000;

%% exID array
% You can either search the reaction names by name or provide them directly
% in the exID array.
% RxnNames = {'EX_glc(e)', 'EX_ac(e)', 'biomass'};
% for i = 1:length(RxnNames)
%    [a,exID(i)] = ismember(RxnNames(i),model.rxns);
% end
[~,sheet_name]=xlsfinfo('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\experimental\Matriz- DCCR Dunaliella salina_dfba.xlsx');
%biomass = strcat(strcat('e_Biomass_trial',sheet_name{z}),'__cytop');
biomass = 'e_ActiveBiomass__cytop';
RxnNames = {biomass, 'PRISM_white_LED__extr', 'EX_C00009__dra', 'EX_C00244__dra', 'DM_C00369__chlo', 'DM_C05306__chlo', 'DM_C05307__chlo', 'DM_C02094__chlo', 'DM_C00422__lip', 'DM_C00116__cytop', ...
                'EX_C00011__dra', 'DM_C00244__cytop', 'DM_C00404__vacu'}; %
exID = cell(nmodel);
for n = 1:nmodel
    temp_array = zeros(length(RxnNames));
    for i = 1:length(RxnNames)
        index = find(strcmp(models{n}.rxns,RxnNames{i}));
        temp_array(i) = index;
    end
    exID{n} = temp_array;
end
INFO.exID = exID;

min = 1;
max = -1;
% Algae
C = cell(nmodel, 2);
for i=1:nmodel
    % Maximize growth
    index_auto = find(strcmp(models{i}.rxns,biomass));
    C{i}(1).sense = max;
    C{i}(1).rxns = index_auto;
    C{i}(1).wts = 1;

    % maximize starch accumulation/ minimize consumption
    index_st = find(strcmp(models{i}.rxns,'DM_C00369__chlo'));
    C{i}(2).sense = max;
    C{i}(2).rxns = index_st;
    C{i}(2).wts = 1;

    % minimize chla accumulation
    index_st = find(strcmp(models{i}.rxns,'DM_C05306__chlo'));
    C{i}(3).sense = min;
    C{i}(3).rxns = index_st;
    C{i}(3).wts = 1;
    
    % minimize chlb accumulation
    index_p = find(strcmp(models{i}.rxns,'DM_C05307__chlo'));
    C{i}(4).sense = min;
    C{i}(4).rxns = index_p;
    C{i}(4).wts = 1;

    % minimize b-carotene accumulation
    index_p = find(strcmp(models{i}.rxns,'DM_C02094__chlo'));
    C{i}(5).sense = min;
    C{i}(5).rxns = index_p;
    C{i}(5).wts = 1;

    % minimize tag accumulation
    index_p = find(strcmp(models{i}.rxns,'DM_C00422__lip'));
    C{i}(6).sense = min;
    C{i}(6).rxns = index_p;
    C{i}(6).wts = 1;

    % minimize glycerol accumulation
    index_p = find(strcmp(models{i}.rxns,'DM_C00116__cytop'));
    C{i}(7).sense = min;
    C{i}(7).rxns = index_p;
    C{i}(7).wts = 1;

    index_p = find(strcmp(models{i}.rxns,'EX_C00009__dra'));
    C{i}(8).sense = min;
    C{i}(8).rxns = index_p;
    C{i}(8).wts = 1;
    
    index_n = find(strcmp(models{i}.rxns,'EX_C00244__dra'));
    C{i}(9).sense = min;
    C{i}(9).rxns = index_n;
    C{i}(9).wts = 1;
    
    % index_co2 = find(strcmp(models{i}.rxns,'EX_C00011__dra'));
    % C{i}(10).sense = min;
    % C{i}(10).rxns = index_co2;
    % C{i}(10).wts = 1;

    % index_no3 = find(strcmp(models{i}.rxns,'DM_C00244__cytop'));
    % C{i}(10).sense = max;
    % C{i}(10).rxns = index_no3;
    % C{i}(10).wts = 1;
    % 
    % index_polyP = find(strcmp(models{i}.rxns,'DM_C00404__vacu'));
    % C{i}(11).sense = max;
    % C{i}(11).rxns = index_polyP;
    % C{i}(11).wts = 1;

end


% CPLEX Objects construction parameters
INFO.LPsolver = 1; % CPLEX = 0, Gurobi = 1.
                   % CPLEX works equally fine with both methods.
                   % Gurobi seems to work better with Method = 1, and 
                   % Mosek with Method = 0.
INFO.tol = 1E-5; % Feasibility, optimality and convergence tolerance for Cplex (tol>=1E-9). 
                 % It is recommended it is at least 2 orders of magnitude
                 % tighter than the integrator tolerance. 
                 % If problems with infeasibility messages, tighten this
                 % tolerance.
INFO.tolPh1 = INFO.tol; % Tolerance to determine if a solution to phaseI equals zero.
                   % It is recommended to be the same as INFO.tol. 
INFO.tolevt = 2*INFO.tol; % Tolerance for event detection. Has to be greater
                   % than INFO.tol.

% You can modify the integration tolerances here.
% If some of the flows become negative after running the simulation once
% you can add the 'Nonnegative' option.

INFO.C = C;

message = strcat('Starting...', sheet_name{z});
disp(message);

% Initial conditions
% Y1 = Volume (L)
% Y2 = Total Biomass (gDW/L)
% Y3 = HPO4
% Y4 = NO3
% Y5 Active Biomass (ga/L)
% Y6 Starch concentration (gs/L)
% Nitrogen Quota (Qn) ()
% Y7 = Penalty
time = matrix{z}.("Time (d)");
if ~isfloat(time) && ~strcmp(class(time), 'double') 
    if all(cellfun(@ischar, time))
     time = str2double(matrix{z}.("Time (d)"));
    end
end
Volume = 1;
initialBiomass = matrix{z}(1,{'DW'}).DW;
phosphate = matrix{end}({sheet_name{z}},{'[P] mmol'}).("[P] mmol");
nitrate = matrix{end}({sheet_name{z}},{'[N] mmol'}).("[N] mmol");
activeBiomass = initialBiomass * 0.6661;
starch_concentration = initialBiomass*0.05;
nitrogen_quota = 5.15; %5.15 mmol/gDW
chlorophyl_quota = matrix{end}({sheet_name{z}},{'chl0'}).("chl0");  %0.045; %0.00066;
%co2_concentration = 1.06;
carotene = 0.0022*initialBiomass;
tag = 0.0131*initialBiomass;
glycerol = 0.15*initialBiomass;
starch_quota = 0.05;
glycerol_quota = 0.15;
carotene_quota = matrix{end}({sheet_name{z}},{'caro0'}).("caro0"); %0.002;
tag_quota = 0.0131;
p_quota = 0.16;
INFO.nacl = matrix{end}({sheet_name{z}},{'Salinity g/L'}).("Salinity g/L");
INFO.Io = matrix{end}({sheet_name{z}},{'Light (umol/m^2.s)'}).("Light (umol/m^2.s)");



%       1           2           3       4           5               6                7      8     9           10              11             12          13              14          15         16
Y0 = [Volume initialBiomass phosphate nitrate activeBiomass starch_concentration carotene tag glycerol nitrogen_quota chlorophyl_quota starch_quota glycerol_quota carotene_quota tag_quota p_quota 0]';
                            
disp(Y0);
% Time of simulation

tspan = [time(1), time(length(time))];

NN = 1:length(Y0);
options = odeset('AbsTol',1E-6,'RelTol',1E-6,'Nonnegative',NN,'Events',@evts);

% INFO: You can use the INFO struct to pass parameters. Don't use any of 
% the names already declared or: INFO.t (carries time information), 
% INFO.ncost, INFO.lexID, INFO.LlexID, INFO.lbct, INFO.ubct, INFO.sense,
% INFO.b, INFO.pair. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[model,INFO] = ModelSetupM(models,Y0,INFO);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if INFO.LPsolver == 0
    [INFO] = LexicographicOpt(model, INFO);
elseif INFO.LPsolver == 1
    [INFO] = LexicographicOptG(model, INFO);
else
    disp('Solver not currently supported.');
end

tic
tint = 0;
TF = [];
YF = [];
while tint<tspan(2)
% Look at MATLAB documentation if you want to change solver.
% ode15s is more or less accurate for stiff problems. 
    [T,Y] = ode15s(@DRHS,tspan,Y0,options,INFO);
    TF = [TF;T];
    YF = [YF;Y];
    tint = T(end);
    tspan = [tint,tspan(2)];
    Y0 = Y(end,:);
    if tint == tspan(2)
        break;
    end
    
% Update b vector 
[INFO] = bupdate(tint,Y0,INFO);
%Determine model with basis change
    value = evts(tint,Y0,INFO);
    ind = find(value<=0);
    fprintf('Basis change at time %d. ',tint);
    k = 0;
    ct = 0;
    while ~isempty(ind)
        k = k + 1;
        ct = ct + size(model{k}.A,1);
        ind2 = find(ind<=ct);
        if ~isempty(ind2)
           INFO.flagbasis = k; 
           fprintf('Model %i. \n',k);
           % Perform lexicographic optimization
           if INFO.LPsolver == 0
               [INFO] = LexicographicOpt(model,INFO);
           elseif INFO.LPsolver == 1
               [INFO] = LexicographicOptG(model,INFO);
           else
               disp('Solver not currently supported.');
           end
           ind(ind2)=[];
        end
    end
end

display(toc);
T = TF;
Y = YF;
%Y(:,nmodel+4) = Y(:,nmodel+4) * 536.8726;

%% Plotting
f1 = figure(1);
hold on
yyaxis left
a = plot(T,Y(:,nmodel+2));
xlabel('Time (d)')
ylabel('Concentration  (mmol/L)');
yyaxis right
b = plot(T,Y(:,nmodel+3));
ylabel('Concentration (mmol/L)');
hold off;
legend([a; b] , "HPO4", "NO3");
filename = strcat('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\dfba\',strcat(strcat(sheet_name{z}, '_Concentrations'), '.fig'));
savefig(filename);
filename = strcat('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\dfba\',strcat(strcat(sheet_name{z}, '_Concentrations'), '.png'));
saveas(f1, filename);

f2 = figure(2);
hold on
yyaxis left
c = plot(T,Y(:,[2, 5]));
xlabel('Time (d)');
ylabel('Biomass (g/L)');
d = scatter(time,matrix{z}(:,{'DW'}).DW,'filled');
hold off
lgd = legend('Total Biomass', 'Functional Biomass'); % tag requires a space after because is also an argument for legend in matlab -_-
lgd.Location = 'northwest';
filename = strcat('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\dfba\', strcat(strcat(sheet_name{z}, '_Biomass'), '.fig'));
savefig(filename);
filename = strcat('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\dfba\', strcat(strcat(sheet_name{z}, '_Biomass'), '.png'));
saveas(f2, filename);

f3 = figure(3);
hold on
yyaxis left
f = plot(T,Y(:,[12, 13, 15]));
xlabel('Time (d)');
ylabel('Quota (g/g)');
%d = scatter(time,matrix{z}(:,{'DW'}).DW,'filled');
yyaxis right
e = plot(T,Y(:,[11, 14]));
ylabel('Pigment Quota (g/g)');
hold off
lgd = legend('Starch', 'Glycerol', 'TAG ', 'Chlorophyll', 'Carotene'); % tag requires a space after because is also an argument for legend in matlab -_-
lgd.Location = 'northwest';
filename = strcat('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\dfba\', strcat(strcat(sheet_name{z}, '_Quotas'), '.fig'));
savefig(f3, filename);
filename = strcat('C:\Users\Bisbii\PythonProjects\ExpGSMM\data\dfba\', strcat(strcat(sheet_name{z}, '_Quotas'), '.png'));
saveas(f3, filename);
message = strcat(sheet_name{z}, ' is over!');
disp(message);
